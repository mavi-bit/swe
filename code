from IPython.display import clear_output
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import datetime as dt
import time
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.layers import Dense, Dropout, LSTM
from tensorflow.keras.models import Sequential

# Define the cryptocurrencies
crypto_currency = 'BTC'
against_currency = 'USD'

# Prepare model inputs for training
start = dt.datetime(2016, 1, 1)
end = dt.datetime.now()

# Fetch the data (once)
data = yf.download(f'{crypto_currency}-{against_currency}', start=start, end=end)

# Check if the data is empty
if data.empty:
    raise ValueError("Downloaded data is empty. Check your ticker symbol, data source, and date range.")

# Prepare Data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

prediction_days = 60

x_train, y_train = [], []

for x in range(prediction_days, len(scaled_data)):
    x_train.append(scaled_data[x - prediction_days:x, 0])
    y_train.append(scaled_data[x, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Create Neural Network model
model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs=10, batch_size=32)

# RSI Calculation Function
def calculate_rsi(data, period=14):
    delta = data.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.rolling(window=period, min_periods=1).mean()
    avg_loss = loss.rolling(window=period, min_periods=1).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    return rsi

# ROI Calculation Function
def calculate_roi(data):
    roi = (data / data.iloc[0] - 1) * 100
    return roi

# Calculate RSI and ROI based on historical data only
data['RSI'] = calculate_rsi(data['Close'])
data['ROI'] = calculate_roi(data['Close'])

# Display predictions along with RSI, ROI, and live price
def display_btc_analysis():
    """Displays BTC-USD analysis plots including predicted prices, RSI, ROI, live price, and prediction range, updating live."""

    # Prepare test data and model inputs
    test_start = dt.datetime(2020, 1, 1)
    test_end = dt.datetime.now()
    test_data = yf.download(f'{crypto_currency}-{against_currency}', start=test_start, end=test_end)
    actual_prices = test_data['Close'].values

    total_dataset = pd.concat((data['Close'], test_data['Close']), axis=0)
    model_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values
    model_inputs = model_inputs.reshape(-1, 1)
    model_inputs = scaler.transform(model_inputs)

    x_test = []
    for x in range(prediction_days, len(model_inputs)):
        x_test.append(model_inputs[x - prediction_days:x, 0])
    x_test = np.array(x_test)
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    prediction_prices = model.predict(x_test)
    prediction_prices = scaler.inverse_transform(prediction_prices)

    while True:
        try:
            # Get the latest BTC price (using '1d' period)
            history_data = yf.Ticker(f'{crypto_currency}-{against_currency}').history(period='1d') 
            if not history_data.empty:
                current_price = history_data['Close'].iloc[-1]  # Get the last price from daily data
            else:
                print("Error: Could not fetch daily price data. Retrying in 60 seconds...")
                time.sleep(60)
                continue

            # Calculate prediction range
            min_pred = np.min(prediction_prices)
            max_pred = np.max(prediction_prices)

            # Clear previous plots
            clear_output(wait=True)

            # Plot results
            fig, axes = plt.subplots(3, 1, figsize=(8, 8))

            # Price plot with live price box in the middle
            axes[0].plot(actual_prices, color='black', label='Actual Prices')
            axes[0].plot(prediction_prices, color='green', label='Predicted Prices')
            axes[0].set_title(f'{crypto_currency} Price Prediction')
            axes[0].set_xlabel('Time')
            axes[0].set_ylabel('Price')
            axes[0].legend(loc='upper left')

            # Display live price box in the middle
            axes[0].text(0.5, 0.9, f"Live Price: ${current_price:.2f}\nRange: ${min_pred:.2f}-${max_pred:.2f}",
                        transform=axes[0].transAxes, fontsize=10, ha='center', va='top', 
                        bbox=dict(facecolor='white', alpha=0.7))

            # RSI plot
            axes[1].plot(data.index, data['RSI'], color='orange', label='RSI', linewidth=1.2)
            axes[1].axhline(y=70, color='red', linestyle='--', label='Overbought (70)')
            axes[1].axhline(y=30, color='blue', linestyle='--', label='Oversold (30)')
            axes[1].set_title(f'{crypto_currency} RSI')
            axes[1].set_xlabel('Time')
            axes[1].set_ylabel('RSI')
            axes[1].legend(loc='upper left')

            # ROI plot
            axes[2].plot(data.index, data['ROI'], color='purple', label='ROI', linewidth=1.2)
            axes[2].set_title(f'{crypto_currency} Return on Investment (ROI)')
            axes[2].set_xlabel('Time')
            axes[2].set_ylabel('ROI (%)')
            axes[2].legend(loc='upper left')

            # Adjust layout
            plt.tight_layout()
            plt.pause(10)  # Pause for 10 seconds for live updates

        except Exception as e:
            print(f"Error fetching live data: {e}")
            time.sleep(60)  # Retry after 60 seconds if there's an error

# Call the function to display results
display_btc_analysis()
