from IPython.display import clear_output
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import datetime as dt
import time
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.layers import Dense, Dropout, LSTM
from tensorflow.keras.models import Sequential
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Define the cryptocurrencies
crypto_currency = 'BTC'
against_currency = 'USD'

# Prepare model inputs for training
start = dt.datetime(2016, 1, 1)
end = dt.datetime.now()

# Fetch the data (once)
data = yf.download(f'{crypto_currency}-{against_currency}', start=start, end=end)

# Check if the data is empty
if data.empty:
    raise ValueError("Downloaded data is empty. Check your ticker symbol, data source, and date range.")

# Prepare Data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

prediction_days = 60

x_train, y_train = [], []

for x in range(prediction_days, len(scaled_data)):
    x_train.append(scaled_data[x - prediction_days:x, 0])
    y_train.append(scaled_data[x, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Create Neural Network model
model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = model.fit(x_train, y_train, epochs=10, batch_size=32)

# RSI Calculation Function
def calculate_rsi(data, period=14):
    delta = data.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.rolling(window=period, min_periods=1).mean()
    avg_loss = loss.rolling(window=period, min_periods=1).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    return rsi

# ROI Calculation Function
def calculate_roi(data):
    roi = (data / data.iloc[0] - 1) * 100
    return roi

# Calculate RSI and ROI based on historical data only
data['RSI'] = calculate_rsi(data['Close'])
data['ROI'] = calculate_roi(data['Close'])

# Prepare test data
test_start = dt.datetime(2020, 1, 1)
test_end = dt.datetime.now()
test_data = yf.download(f'{crypto_currency}-{against_currency}', start=test_start, end=test_end)
actual_prices = test_data['Close'].values

total_dataset = pd.concat((data['Close'], test_data['Close']), axis=0)
model_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values
model_inputs = model_inputs.reshape(-1, 1)
model_inputs = scaler.transform(model_inputs)

x_test, y_test = [], []
for x in range(prediction_days, len(model_inputs)):
    x_test.append(model_inputs[x - prediction_days:x, 0])
    y_test.append(model_inputs[x, 0])

x_test, y_test = np.array(x_test), np.array(y_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Make test predictions
prediction_prices = model.predict(x_test)
prediction_prices = scaler.inverse_transform(prediction_prices)

# Calculate accuracy metrics
train_loss = history.history['loss'][-1]
test_loss = mean_squared_error(scaler.inverse_transform(y_test.reshape(-1, 1)), prediction_prices)

train_rmse = np.sqrt(train_loss)
test_rmse = np.sqrt(test_loss)

rmse = np.sqrt(mean_squared_error(actual_prices, prediction_prices))
mae = mean_absolute_error(actual_prices, prediction_prices)
r2 = r2_score(actual_prices, prediction_prices)
mpe = np.mean((actual_prices - prediction_prices) / actual_prices) * 100

# Define accuracy as R² score (percentage)
train_accuracy = (1 - train_loss) * 100
test_accuracy = r2 * 100  # R² expressed as a percentage
data_loss = (train_loss / scaler.data_max_[0]) * 100

# Display live BTC analysis
def display_btc_analysis():
    while True:
        try:
            history_data = yf.Ticker(f'{crypto_currency}-{against_currency}').history(period='1d')
            if not history_data.empty:
                current_price = history_data['Close'].iloc[-1]
            else:
                print("Error: Could not fetch daily price data. Retrying in 60 seconds...")
                time.sleep(60)
                continue

            min_pred = np.min(prediction_prices)
            max_pred = np.max(prediction_prices)

            clear_output(wait=True)

            fig, axes = plt.subplots(4, 1, figsize=(8, 12))

            # Price plot
            axes[0].plot(actual_prices, color='black', label='Actual Prices')
            axes[0].plot(prediction_prices, color='green', label='Predicted Prices')
            axes[0].set_title(f'{crypto_currency} Price Prediction')
            axes[0].text(0.5, 0.9, f"Live Price: ${current_price:.2f}\nRange: ${min_pred:.2f}-${max_pred:.2f}",
                         transform=axes[0].transAxes, fontsize=10, ha='center', bbox=dict(facecolor='white', alpha=0.7))
            axes[0].legend()

            # RSI plot
            axes[1].plot(data.index, data['RSI'], color='orange', label='RSI')
            axes[1].axhline(y=70, color='red', linestyle='--', label='Overbought')
            axes[1].axhline(y=30, color='blue', linestyle='--', label='Oversold')
            axes[1].legend()

            # ROI plot
            axes[2].plot(data.index, data['ROI'], color='purple', label='ROI')
            axes[2].legend()

            # Metrics
            axes[3].axis('off')
            axes[3].text(0.1, 0.5,
                         (f"Metrics:\n"
                          f"Train Accuracy: {train_accuracy:.2f}%\n"
                          f"Test Accuracy (R²): {test_accuracy:.2f}%\n"
                          f"Data Loss: {data_loss:.2f}%\n"
                          f"RMSE: {rmse:.4f}\n"
                          f"MAE: {mae:.4f}\n"
                          f"R²: {r2:.4f}\n"
                          f"MPE: {mpe:.4f}%"),
                         fontsize=12, bbox=dict(facecolor='white', alpha=0.7))

            plt.tight_layout()
            plt.pause(10)

        except Exception as e:
            print(f"Error fetching live data: {e}")
            time.sleep(60)

# Start live display
display_btc_analysis()
